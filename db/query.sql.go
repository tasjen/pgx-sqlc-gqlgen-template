// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTodo = `-- name: CreateTodo :exec
INSERT INTO todos (id, title, description, done, user_id)
VALUES ($1, $2, $3, $4, $5)
`

type CreateTodoParams struct {
	ID          pgtype.UUID
	Title       string
	Description pgtype.Text
	Done        bool
	UserID      pgtype.UUID
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) error {
	_, err := q.db.Exec(ctx, createTodo,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Done,
		arg.UserID,
	)
	return err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users (id, name)
VALUES ($1, $2)
RETURNING id
`

type CreateUserParams struct {
	ID   pgtype.UUID
	Name string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser, arg.ID, arg.Name)
	return err
}

const deleteTodosFromUser = `-- name: DeleteTodosFromUser :exec
DELETE FROM todos
WHERE user_id = $1
`

func (q *Queries) DeleteTodosFromUser(ctx context.Context, userID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteTodosFromUser, userID)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getTodosFromUser = `-- name: GetTodosFromUser :many
SELECT id, title, description, done, user_id FROM todos
WHERE user_id = $1
ORDER BY done, title
`

func (q *Queries) GetTodosFromUser(ctx context.Context, userID pgtype.UUID) ([]Todo, error) {
	rows, err := q.db.Query(ctx, getTodosFromUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Done,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, name FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const updateTodo = `-- name: UpdateTodo :exec
UPDATE todos
SET title = $2, description = $3, done = $4
WHERE id = $1
`

type UpdateTodoParams struct {
	ID          pgtype.UUID
	Title       string
	Description pgtype.Text
	Done        bool
}

func (q *Queries) UpdateTodo(ctx context.Context, arg UpdateTodoParams) error {
	_, err := q.db.Exec(ctx, updateTodo,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Done,
	)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET name = $2
WHERE id = $1
`

type UpdateUserParams struct {
	ID   pgtype.UUID
	Name string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser, arg.ID, arg.Name)
	return err
}
